# -*- coding: utf-8 -*-
"""plant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z09bssHsjAvxU_qc-g_-kAKnvePgZKBw
"""

# üçé Apple Leaf Disease Detection using CNN (Direct Google Drive Paths)

# ‚úÖ Import Libraries
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
import matplotlib.pyplot as plt
import numpy as np
import os
from google.colab import files

# ‚úÖ Set Train and Test Directory Paths (üìÅ Replace with your exact paths)
train_dir = '/content/drive/MyDrive/appleclass/train'  # üëà update if needed
test_dir = '/content/drive/MyDrive/appleclass/test'    # üëà update if needed

img_size = (128, 128)
batch_size = 32

# ‚úÖ Data Generators
train_datagen = ImageDataGenerator(rescale=1./255, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(train_dir, target_size=img_size, batch_size=batch_size, class_mode='categorical')
test_data = test_datagen.flow_from_directory(test_dir, target_size=img_size, batch_size=batch_size, class_mode='categorical')

# ‚úÖ CNN Model
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dropout(0.5),
    Dense(128, activation='relu'),
    Dense(3, activation='softmax')  # 3 classes
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

# ‚úÖ Train Model
history = model.fit(train_data, validation_data=test_data, epochs=10)

# ‚úÖ Plot Accuracy and Loss
plt.figure(figsize=(12,4))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.legend()
plt.show()

# ‚úÖ Predict Uploaded Image
uploaded = files.upload()
for fn in uploaded.keys():
    img = load_img(fn, target_size=img_size)
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0

    prediction = model.predict(img_array)
    class_names = list(train_data.class_indices.keys())
    predicted_class = class_names[np.argmax(prediction)]
    confidence = np.max(prediction)

    print(f"\nüß† Predicted Class: {predicted_class} ({confidence*100:.2f}%)")

    plt.imshow(img)
    plt.title(f"Prediction: {predicted_class}")
    plt.axis('off')
    plt.show()

# ‚úÖ Save Model
model.save('/content/drive/MyDrive/apple_leaf_cnn_model.h5')

!pip install pyngrok

!pip install flask
!pip install flask-ngrok

from pyngrok import ngrok

# Replace 'YOUR_NGROK_AUTHTOKEN' with the token you copied from the ngrok dashboard
ngrok.set_auth_token('2xolCP54VgfG7s5Npjq3r0bHv6u_3ihq4ydb1ZpgxH9E5AQHF')

# Start ngrok tunnel
public_url = ngrok.connect(5000)
print(f" * Running on {public_url}")

import os
import numpy as np
from flask import Flask, render_template_string, request, jsonify
from pyngrok import ngrok
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from werkzeug.utils import secure_filename

# Suppress TensorFlow warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

# Configuration
ngrok.set_auth_token('YOUR_NGROK_AUTHTOKEN')  # Replace with your Ngrok token
UPLOAD_FOLDER = '/content/drive/MyDrive/Colab Notebooks/uploaded image'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
MODEL_PATH = "/content/drive/MyDrive/apple_leaf_cnn_model.h5"
CLASS_NAMES = ['Apple_scab', 'Apple_black_rot', 'Apple_cedar_rust']

DISEASE_INFO = {
    'Apple_scab': {
        'about': 'Apple scab is a fungal disease caused by Venturia inaequalis. It causes dark, scabby lesions on leaves and fruit.',
        'treatment': 'Use fungicides such as captan or myclobutanil. Prune trees to improve air circulation and remove fallen leaves.'
    },
    'Apple_black_rot': {
        'about': 'Black rot is caused by the fungus Botryosphaeria obtusa. It affects leaves, fruit, and bark.',
        'treatment': 'Remove infected plant material and apply appropriate fungicides like thiophanate-methyl or copper sprays.'
    },
    'Apple_cedar_rust': {
        'about': 'Cedar apple rust is a fungal disease caused by Gymnosporangium juniperi-virginianae. It requires both apple and cedar trees to complete its lifecycle.',
        'treatment': 'Apply fungicides during early growth stages and remove nearby cedar hosts if possible.'
    }
}

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

model = load_model(MODEL_PATH)
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def index():
    return render_template_string("""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>üçé Apple Leaf Disease Classifier</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <style>
            body {
                margin: 0;
                height: 100vh;
                background: linear-gradient(-45deg, #e3f2fd, #d1c4e9, #fce4ec, #ffe0b2);
                background-size: 400% 400%;
                animation: gradientBG 15s ease infinite;
                display: flex;
                align-items: center;
                justify-content: center;
                font-family: 'Segoe UI', sans-serif;
            }

            @keyframes gradientBG {
                0% {background-position: 0% 50%;}
                50% {background-position: 100% 50%;}
                100% {background-position: 0% 50%;}
            }

            .card {
                background: rgba(255, 255, 255, 0.85);
                border-radius: 16px;
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
                padding: 30px;
                max-width: 750px;
                width: 100%;
                backdrop-filter: blur(10px);
            }

            h2 {
                font-weight: bold;
                color: #2e7d32;
            }

            canvas {
                margin-top: 15px;
                background-color: white;
                padding: 10px;
                border-radius: 10px;
                box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
            }

            .btn-primary {
                background-color: #388e3c;
                border: none;
            }

            .btn-primary:hover {
                background-color: #2e7d32;
            }

            #result p span {
                font-weight: 600;
            }
        </style>
    </head>
    <body>
        <div class="card">
            <h2 class="text-center mb-4">üçé Apple Leaf Disease Classifier</h2>
            <p class="text-center">Upload an image of an apple leaf to predict the disease and get treatment advice.</p>
            <form id="uploadForm" enctype="multipart/form-data">
                <input class="form-control mb-3" type="file" name="file" required>
                <button class="btn btn-primary w-100" type="submit">Upload and Predict</button>
            </form>
            <div id="result" style="display: none;" class="mt-4">
                <h5 class="text-info">Prediction Result</h5>
                <p><strong>Predicted Class:</strong> <span id="predictedClass"></span></p>
                <p><strong>Confidence:</strong> <span id="confidence"></span></p>
                <p><strong>About the Disease:</strong> <span id="about"></span></p>
                <p><strong>Treatment Suggestion:</strong> <span id="treatment"></span></p>
                <div class="row">
                    <div class="col-md-6">
                        <canvas id="barChart"></canvas>
                    </div>
                    <div class="col-md-6">
                        <canvas id="pieChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <script>
        document.getElementById('uploadForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            fetch('/predict', {
                method: 'POST',
                body: formData
            })
            .then(res => res.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                    return;
                }
                document.getElementById('predictedClass').innerText = data.predicted_class;
                document.getElementById('confidence').innerText = data.confidence;
                document.getElementById('about').innerText = data.about;
                document.getElementById('treatment').innerText = data.treatment;
                document.getElementById('result').style.display = 'block';

                const labels = data.classes;
                const probabilities = data.probabilities;

                new Chart(document.getElementById('barChart'), {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Prediction Probabilities',
                            data: probabilities,
                            backgroundColor: ['#66bb6a', '#ffa726', '#ef5350']
                        }]
                    },
                    options: {
                        scales: { y: { beginAtZero: true, max: 1 } },
                        plugins: {
                            legend: { display: false }
                        }
                    }
                });

                new Chart(document.getElementById('pieChart'), {
                    type: 'pie',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: probabilities,
                            backgroundColor: ['#66bb6a', '#ffa726', '#ef5350']
                        }]
                    },
                    options: {
                        plugins: {
                            legend: { position: 'bottom' }
                        }
                    }
                });
            });
        });
        </script>
    </body>
    </html>
    """)

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'})
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)

        img = load_img(file_path, target_size=(128, 128))
        img_array = img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        prediction = model.predict(img_array)[0]

        class_index = int(np.argmax(prediction))
        confidence = float(np.max(prediction)) * 100
        predicted_class = CLASS_NAMES[class_index]
        disease_info = DISEASE_INFO.get(predicted_class, {'about': 'N/A', 'treatment': 'N/A'})

        return jsonify({
            'predicted_class': predicted_class,
            'confidence': f'{confidence:.2f}%',
            'probabilities': prediction.tolist(),
            'classes': CLASS_NAMES,
            'about': disease_info['about'],
            'treatment': disease_info['treatment']
        })
    else:
        return jsonify({'error': 'Invalid file format. Please upload a PNG, JPG, or JPEG image.'})

if __name__ == '__main__':
    public_url = ngrok.connect(5000)
    print(f" * Public URL: {public_url}")
    app.run(port=5000, use_reloader=False)

